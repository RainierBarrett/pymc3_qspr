import numpy
ALPHABET = ['A','R','N','D','C','Q','E','G','H','I', 'L','K','M','F','P','S','T','W','Y','V']
        
def pep_to_int_list( pep):
    '''Takes a single string of amino acids and translates to a list of ints'''
    return(list(map(ALPHABET.index, pep.replace('\n', ''))))


def get_hist_prob( bins, counts, value):
    '''takes in the bins and counts from a histogram (not necessarily normalized)
    and a value, returns the height of the bin that value falls into.'''
    idx = numpy.argmax(bins > value)
    if idx==0:
        return(0)
    else:
        return(counts[idx-1]/numpy.sum(counts))


def read_logs( trainfile, testfile, return_strings = False):
    '''Reads in the log files generated by runs of the other python files.'''
    train_data = {}#dict keyed by peptide length containing the sequences
    test_data = {}
    peptide_strings = {}
    train_peptides = []
    test_peptides = []
    big_aa_string = ''#for training the whole background distro
    with open(trainfile, 'r') as f:
        lines = f.readlines()
        nlines = len(lines)
        start_idx = (1 if ('#' in lines[0] or 'sequence' in lines[0]) else 0)
        for line in lines[start_idx:]:#skip the header
            pep = line.split(',')[0]
            train_peptides.append(pep)
            length = len(pep)
            big_aa_string+=pep
            if(length not in train_data.keys()):
                train_data[length] = [(pep_to_int_list(pep))]
            else:
                train_data[length].append((pep_to_int_list(pep)))
            if(length not in peptide_strings.keys()):
                peptide_strings[length] = [pep]
            else:
                peptide_strings[length].append(pep)
    with open(testfile, 'r') as f:
        lines = f.readlines()
        nlines = len(lines)
        start_idx = (1 if ('#' in lines[0] or 'sequence' in lines[0]) else 0)
        for line in lines[start_idx:]:#skip the header
            pep = line.split(',')[0]
            test_peptides.append(pep)
            length = len(pep)
            big_aa_string+=pep
            if(length not in test_data.keys()):
                test_data[length] = [(pep_to_int_list(pep))]
            else:
                test_data[length].append((pep_to_int_list(pep)))
            if(length not in peptide_strings.keys()):
                peptide_strings[length] = [pep]
            else:
                peptide_strings[length].append(pep)
    big_aa_list = pep_to_int_list(big_aa_string)
    if(return_strings):
        return(train_peps, test_peps, train_data, test_data, big_aa_list, peptide_strings)
    else:
        return(train_peps, test_peps, train_data, test_data, big_aa_list)

